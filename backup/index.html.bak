<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GlobiQ Password Manager</title>
    <script src="https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js"></script>
    <script src="js/app.js"></script>
    <script src="js/password-strength.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            max-width: 800px;
            margin: 0 auto;
            overflow: hidden;
        }        

        :root {
            --primary-color: #800000;
            --primary-dark: #600000;
            --primary-light: #A52A2A;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
        }

        .logo-container {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
        }

        .logo {
            width: 48px;
            height: 48px;
            background: white;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .header h1 {
            margin-bottom: 10px;
        }

        .content {
            padding: 30px;
        }

        .dashboard-page {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #333;
        }

        input[type="text"], input[type="password"], input[type="range"], input[type="email"], input[type="url"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 6px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus, input[type="password"]:focus, input[type="email"]:focus, input[type="url"]:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: var(--primary-dark);
        }

        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .status {
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 20px;
        }

        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status.info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            padding: 8px 16px;
            font-size: 14px;
        }

        .tabs {
            display: flex;
            border-bottom: 2px solid var(--primary-color);
            margin-bottom: 20px;
        }

        .tab {
            background-color: #f0f0f0;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            padding: 15px 20px;
            cursor: pointer;
            border-bottom: none;
            font-weight: 600;
            margin-right: 5px;
            border-radius: 6px 6px 0 0;
        }

        .tab.active {
            background-color: var(--primary-color);
            color: white;
        }

        .tab-content {
            display: none;
            padding: 20px;
            background: #fff;
            border-radius: 0 0 8px 8px;
        }

        .tab-content.active {
            display: block;
        }

        .password-entry {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 15px;
            border-left: 4px solid var(--primary-color);
        }

        .password-details {
            margin-top: 10px;
            padding: 10px;
            background: #fff;
            border-radius: 4px;
            font-family: monospace;
        }

        .password-field {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 5px 0;
        }

        .toggle-password {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            padding: 5px;
            font-size: 14px;
        }

        .user-info {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            border-left: 4px solid var(--primary-color);
        }

        .search-container {
            position: relative;
            margin-bottom: 20px;
        }

        .search-container input {
            padding-right: 40px;
        }

        .search-clear {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            color: #666;
            padding: 0;
            width: 30px;
            height: 30px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .password-input-group {
            position: relative;
        }

        .password-strength-meter {
            height: 5px;
            background-color: #f0f0f0;
            margin-top: 5px;
            border-radius: 3px;
            overflow: hidden;
        }

        .password-strength-meter div {
            height: 100%;
            width: 0;
            transition: all 0.3s;
        }

        .password-strength-meter.weak div {
            width: 33%;
            background-color: #ff4444;
        }

        .password-strength-meter.medium div {
            width: 66%;
            background-color: #ffbb33;
        }

        .password-strength-meter.strong div {
            width: 100%;
            background-color: #00C851;
        }

        .password-strength-text {
            font-size: 12px;
            margin-top: 5px;
            color: #666;
        }

        .settings-container {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
        }

        .settings-group {
            margin-bottom: 15px;
        }

        .settings-group label {
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
        }

        .form-container {
            max-width: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="logo-container">
                <div class="logo">GQ</div>
                <div>
                    <h1>üîê GlobiQ Password Manager</h1>
                    <p>Secure password management for Microsoft Teams</p>
                    <div id="userContext" style="margin-top: 10px; font-size: 14px; opacity: 0.9;">
                        <span id="currentUserDisplay">Loading user...</span>
                    </div>
                </div>
            </div>
            <button id="logoutBtn" class="logout-btn" onclick="handleLogout()">Logout</button>
        </div>

        <!-- Dashboard Page -->
        <div id="dashboardPage" class="dashboard-page">
            <div class="content">
                <!-- Status Message -->
                <div id="status" class="status info">
                    üîê Connecting to Microsoft Teams - Auto-login in progress...
                </div>

                <!-- User Information -->
                <div id="userInfo" class="user-info" style="display: none;">
                    <strong>üë§ Current User:</strong> <span id="currentUser">Loading...</span><br>
                    <strong>üìß Email:</strong> <span id="userEmail">Loading...</span><br>
                    <strong>üè¢ Organization:</strong> GlobiQ
                </div>

                <!-- Stats -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="totalPasswords">0</div>
                        <div>Total Passwords</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="strongPasswords">0</div>
                        <div>Strong Passwords</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="sharedCount">0</div>
                        <div>Shared Passwords</div>
                    </div>
                </div>

                <!-- Tabs -->
                <div class="tabs">
                    <button class="tab active" data-tab="add" onclick="showTab('add', this)">
                        ‚ûï Add Credential
                    </button>
                    <button class="tab" data-tab="view" onclick="showTab('view', this)">
                        üîë View Credentials
                    </button>
                    <button class="tab" data-tab="settings" onclick="showTab('settings', this)">
                        ‚öôÔ∏è Settings
                    </button>
                    <button class="tab" data-tab="admin" onclick="showTab('admin', this)" id="adminTab" style="display: none;">
                        üë• Admin
                    </button>
                </div>

                <!-- Add Credential Tab -->
                <div id="addTab" class="tab-content active">
                    <div class="form-container">
                        <h3>Add New Credential</h3>
                        <form onsubmit="savePassword(event)">
                            <div class="form-group">
                                <label for="title">Title *</label>
                                <input type="text" id="title" required placeholder="e.g., Work Account">
                            </div>
                            <div class="form-group">
                                <label for="url">Website URL</label>
                                <input type="url" id="url" placeholder="https://example.com">
                            </div>
                            <div class="form-group">
                                <label for="username">Username/Email</label>
                                <input type="text" id="username" placeholder="username or email">
                            </div>
                            <div class="form-group">
                                <label for="password">Password *</label>
                                <div class="password-input-group">
                                    <input type="password" id="password" required>
                                    <div class="password-strength-meter">
                                        <div></div>
                                    </div>
                                    <div class="password-strength-text"></div>
                                </div>
                            </div>
                            <input type="hidden" id="editPasswordId" value="">
                            <div style="display: flex; justify-content: flex-end; margin-top: 20px;">
                                <button type="submit">Save Password</button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- View Credentials Tab -->
                <div id="viewTab" class="tab-content">
                    <div class="search-container">
                        <input type="text" id="searchInput" placeholder="üîç Search passwords..." oninput="filterPasswords()">
                        <button class="search-clear" onclick="clearSearch()">√ó</button>
                    </div>
                    <div id="passwordsList">
                        <!-- Passwords will be loaded here -->
                    </div>
                </div>

                <!-- Settings Tab -->
                <div id="settingsTab" class="tab-content">
                    <div class="settings-container">
                        <h3>Settings</h3>
                        <div class="settings-group">
                            <label>
                                <input type="checkbox" id="autoLogout" onchange="updateSettings()">
                                Auto logout after 5 minutes of inactivity
                            </label>
                        </div>
                        <div class="settings-group">
                            <label>
                                <input type="checkbox" id="showPasswordStrength" onchange="updateSettings()" checked>
                                Show password strength indicator
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Admin Tab -->
                <div id="adminTab" class="tab-content">
                    <h3>üë• User Management</h3>
                    <div style="margin-bottom: 20px;">
                        <button onclick="showAddUserModal()">‚ûï Add New User</button>
                    </div>
                    <div id="usersList">
                        <!-- Users will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        // IMMEDIATE SAMPLE DATA DESTRUCTION - Runs before anything else
        (function() {
            console.log('üíÄ IMMEDIATE SAMPLE DATA DESTRUCTION INITIATED...');
            
            // Clear any existing password data immediately
            if (typeof passwords !== 'undefined') {
                passwords.clear();
            }
            
            // Nuclear localStorage cleanup
            try {
                const allKeys = Object.keys(localStorage);
                allKeys.forEach(key => {
                    const value = localStorage.getItem(key);
                    if (value && (
                        value.includes('Gmail Account') ||
                        value.includes('LinkedIn') ||
                        value.includes('Azure Portal') ||
                        value.includes('n.cuerpo@globiq.com') ||
                        key.includes('password') ||
                        key.includes('demo') ||
                        key.includes('sample')
                    )) {
                        localStorage.removeItem(key);
                        console.log(`üíÄ IMMEDIATE DESTRUCTION: ${key}`);
                    }
                });
            } catch (e) {
                console.log('‚ö†Ô∏è Immediate cleanup error:', e);
            }
        })();

        // Global variables
        let currentUser = null;
        let currentUserEmail = null;
        let teamsContext = null;
        let passwords = new Map();
        let users = new Map();
        let isAdmin = false;
          // API Configuration
        const API_BASE_URL = 'http://localhost:3000/api';
        
        // API Helper Functions
        async function apiCall(endpoint, options = {}) {
            const url = `${API_BASE_URL}${endpoint}`;
            const defaultOptions = {
                headers: {
                    'Content-Type': 'application/json',
                    'x-user-email': currentUserEmail,
                    'x-user-id': currentUser
                }
            };
            
            const finalOptions = {
                ...defaultOptions,
                ...options,
                headers: {
                    ...defaultOptions.headers,
                    ...options.headers
                }
            };
            
            try {
                console.log(`üåê API Call: ${options.method || 'GET'} ${url}`);
                const response = await fetch(url, finalOptions);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.message || `HTTP ${response.status}: ${response.statusText}`);
                }
                
                return data;
            } catch (error) {
                console.error('‚ùå API Call failed:', error);
                // Fallback to localStorage if API fails
                if (endpoint.includes('/passwords')) {
                    console.log('üîÑ Falling back to localStorage due to API error');
                    return null; // Will trigger localStorage fallback
                }
                throw error;
            }
        }        // AGGRESSIVE auto-initialize - multiple triggers for Teams
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Starting GlobiQ Password Manager...');
            // IMMEDIATE sample data cleanup before ANY authentication
            nukeSampleData();
            autoAuthenticate();
            
            // Start continuous sample data monitoring
            startContinuousCleanup();
        });

        // Additional initialization triggers for Teams
        window.addEventListener('load', function() {
            console.log('üîÑ Window loaded - backup initialization trigger');
            // Give a short delay and try again if not already authenticated
            setTimeout(() => {
                if (!currentUser) {
                    console.log('üîÑ User not detected, triggering backup authentication...');
                    nukeSampleData(); // Clean again
                    autoAuthenticate();
                }
            }, 1000);
        });

        // Teams-specific initialization
        if (window.location.href.includes('teams') || navigator.userAgent.includes('Teams')) {
            console.log('üöÄ Teams environment detected - immediate initialization');
            // Try to authenticate immediately
            setTimeout(() => {
                nukeSampleData(); // Clean immediately
                if (typeof autoAuthenticate === 'function') {
                    autoAuthenticate();
                }
            }, 500);
        }

        // CONTINUOUS CLEANUP MONITOR - runs every 3 seconds
        function startContinuousCleanup() {
            console.log('üîÑ Starting continuous sample data monitoring...');
            setInterval(() => {
                if (passwords && passwords.size > 0) {
                    ACTIVELY_REMOVE_SAMPLE_DATA();
                }
            }, 3000); // Check every 3 seconds
        }

        // NUCLEAR SAMPLE DATA CLEANUP FUNCTION
        function nukeSampleData() {
            console.log('üí• NUCLEAR SAMPLE DATA CLEANUP INITIATED...');
            
            try {
                // Clear all localStorage - nuclear option
                const allKeys = Object.keys(localStorage);
                console.log(`üîç Found ${allKeys.length} localStorage keys`);
                
                // Remove any keys that could contain sample data
                allKeys.forEach(key => {
                    if (
                        key.includes('password') || 
                        key.includes('demo') || 
                        key.includes('sample') ||
                        key.includes('globiq') ||
                        key.includes('teams') ||
                        key.includes('credentials') ||
                        key.includes('n.cuerpo') ||
                        key === 'users'
                    ) {
                        const oldValue = localStorage.getItem(key);
                        localStorage.removeItem(key);
                        console.log(`üóëÔ∏è NUKED localStorage key: ${key}`);
                        
                        // If it contained sample data patterns, log it
                        if (oldValue && (
                            oldValue.includes('Gmail Account') ||
                            oldValue.includes('LinkedIn') ||
                            oldValue.includes('Azure Portal') ||
                            oldValue.includes('n.cuerpo@globiq.com')
                        )) {
                            console.log(`üí£ CONFIRMED: Removed sample data from ${key}`);
                        }
                    }
                });
                
                // Also clear any Maps in memory if they exist
                if (typeof passwords !== 'undefined') {
                    passwords.clear();
                }
                if (typeof users !== 'undefined') {
                    users.clear();
                }
                
                console.log('‚úÖ Nuclear cleanup complete - ALL sample data destroyed');
                
            } catch (error) {
                console.log('‚ùå Error during nuclear cleanup:', error);
            }
        }
          // Enhanced auto-authentication function with aggressive Teams detection
        async function autoAuthenticate() {
            updateStatus('üîê Connecting to Microsoft Teams...', 'info');
            
            // Add a global timeout to prevent hanging
            const globalTimeout = setTimeout(() => {
                console.log('‚è±Ô∏è GLOBAL TIMEOUT: Authentication taking too long, forcing completion');
                updateStatus('‚ö° Forcing authentication completion...', 'warning');
                
                // Force authentication with fallback user
                const sessionId = Math.random().toString(36).substring(2, 8);
                currentUserEmail = `teams-user-${sessionId}@organization.com`;
                currentUser = `teams-user-${sessionId}`;
                completeAuthentication();
            }, 8000); // 8 second global timeout
            
            // Comprehensive environment detection
            const userAgent = navigator.userAgent;
            const currentUrl = window.location.href;
            const isInIframe = window.parent !== window;
            const hasTeamsInUA = userAgent.includes('Teams/') || userAgent.includes('SkypeSpaces');
            const hasTeamsInUrl = currentUrl.includes('teams.microsoft.com') || currentUrl.includes('teams.live.com');
            const isInTeams = hasTeamsInUA || hasTeamsInUrl || isInIframe;

            // Force Teams environment if any indicator is present
            console.log('üåê COMPREHENSIVE Environment Detection:');
            console.log('   User Agent:', userAgent);
            console.log('   Current URL:', currentUrl);
            console.log('   In iframe:', isInIframe);
            console.log('   Teams in UA:', hasTeamsInUA);
            console.log('   Teams in URL:', hasTeamsInUrl);
            console.log('   FINAL - Is in Teams:', isInTeams);              // FORCE TEAMS AUTHENTICATION - Skip SDK checks if in Teams
            if (isInTeams) {
                console.log('üöÄ FORCING Teams authentication - bypassing complex SDK validation');
                console.log('üì± Teams environment detected, proceeding with direct authentication...');
                
                // Generate unique session-based user immediately
                const sessionId = Math.random().toString(36).substring(2, 8);
                currentUserEmail = `teams-user-${sessionId}@organization.com`;
                currentUser = `teams-user-${sessionId}`;
                
                // Try to get real Teams context but with very short timeout
                try {
                    if (typeof microsoftTeams !== 'undefined') {
                        console.log('üì± Teams SDK available, attempting quick context extraction...');
                        
                        // Very quick attempt - if it works great, if not, proceed anyway
                        const quickContext = await Promise.race([
                            new Promise((resolve) => {
                                try {
                                    if (microsoftTeams.app && microsoftTeams.app.initialize) {
                                        microsoftTeams.app.initialize().then(() => {
                                            return microsoftTeams.app.getContext();
                                        }).then((context) => {
                                            if (context && context.user) {
                                                currentUserEmail = context.user.userPrincipalName || context.user.loginHint || currentUserEmail;
                                                currentUser = currentUserEmail.split('@')[0];
                                                console.log('‚úÖ Quick new SDK user extracted:', currentUser);
                                            }
                                            resolve(context);
                                        }).catch(() => resolve(null));
                                    } else {
                                        microsoftTeams.initialize();
                                        microsoftTeams.getContext((context) => {
                                            if (context && (context.userPrincipalName || context.loginHint)) {
                                                currentUserEmail = context.userPrincipalName || context.loginHint || currentUserEmail;
                                                currentUser = currentUserEmail.split('@')[0];
                                                console.log('‚úÖ Quick legacy SDK user extracted:', currentUser);
                                            }
                                            resolve(context);
                                        });
                                    }
                                } catch (e) {
                                    resolve(null);
                                }
                            }),
                            new Promise((resolve) => setTimeout(() => resolve(null), 2000)) // 2 second timeout
                        );
                        
                        if (quickContext) {
                            console.log('‚úÖ Got Teams context quickly');
                        } else {
                            console.log('‚ö†Ô∏è Quick Teams context failed, using session user');
                        }
                    }
                } catch (e) {
                    console.log('‚ö†Ô∏è Teams SDK error, using fallback user:', e.message);
                }
                
                // ALWAYS proceed immediately in Teams - NEVER hang
                console.log('üöÄ Proceeding immediately with Teams authentication...');
                console.log('   Final user:', currentUser);
                console.log('   Final email:', currentUserEmail);
                
                // Clear the global timeout since we're proceeding
                clearTimeout(globalTimeout);
                completeAuthentication();
                return; // Exit early for Teams
            }

            try {
                // Check if Teams SDK is available (non-Teams environments)
                if (typeof microsoftTeams === 'undefined') {
                    console.log('‚ö†Ô∏è Teams SDK not found');
                    if (isInTeams) {
                        console.log('üîÑ In Teams environment but SDK not loaded, retrying...');
                        // Wait a bit and try again
                        await new Promise(resolve => setTimeout(resolve, 2000));
                        if (typeof microsoftTeams === 'undefined') {
                            throw new Error('Teams SDK still not available after retry');
                        }
                    } else {
                        throw new Error('Teams SDK not available');
                    }
                }
                
                console.log('üì± Teams SDK detected, version:', microsoftTeams.version || 'unknown');
                
                // Try multiple initialization approaches
                let initSuccess = false;
                
                // Approach 1: Try new SDK first if available
                if (microsoftTeams.app && microsoftTeams.app.initialize) {
                    try {
                        console.log('üÜï Attempting new Teams SDK (2.0+) initialization...');
                        await microsoftTeams.app.initialize();
                        console.log('‚úÖ New Teams SDK initialized successfully');
                        
                        const newContext = await microsoftTeams.app.getContext();
                        if (newContext) {
                            teamsContext = newContext;
                            console.log('üìã New SDK context:', newContext);
                            initSuccess = true;
                        }
                    } catch (newSdkError) {
                        console.log('‚ùå New SDK failed:', newSdkError.message);
                    }
                }
                  // Approach 2: Fallback to legacy SDK
                if (!initSuccess) {
                    console.log('üîÑ Trying legacy Teams SDK initialization...');
                    try {
                        await new Promise((resolve, reject) => {
                            const timeout = setTimeout(() => {
                                console.log('‚è±Ô∏è Teams initialization timeout (3s) - proceeding anyway');
                                resolve(); // Don't reject, just proceed
                            }, 3000); // Much shorter timeout
                            
                            try {
                                microsoftTeams.initialize(() => {
                                    clearTimeout(timeout);
                                    console.log('‚úÖ Legacy Teams SDK initialized successfully');
                                    resolve();
                                });
                            } catch (error) {
                                clearTimeout(timeout);
                                console.log('‚ùå Legacy SDK init error:', error);
                                resolve(); // Don't reject, proceed anyway
                            }
                        });
                    } catch (error) {
                        console.log('‚ùå Legacy SDK initialization failed:', error);
                        // Continue anyway - don't let this block authentication
                    }

                    // Get Teams context with extended timeout
                    console.log('üîç Getting Teams context...');                    teamsContext = await new Promise((resolve, reject) => {
                        const timeout = setTimeout(() => {
                            console.log('‚è±Ô∏è Teams context timeout (3s) - proceeding with fallback');
                            resolve({ isTeamsEnvironment: true, fallback: true });
                        }, 3000); // Reduced timeout - don't wait too long
                        
                        try {
                            microsoftTeams.getContext((context) => {
                                clearTimeout(timeout);
                                console.log('üìã Legacy SDK context:', context);
                                
                                if (context && typeof context === 'object') {
                                    console.log('‚úÖ Teams context received');
                                    console.log('üìã Context keys:', Object.keys(context));
                                    resolve(context);
                                } else {
                                    console.log('‚ùå Empty or invalid Teams context - using fallback');
                                    resolve({ isTeamsEnvironment: true, fallback: true });
                                }
                            });
                        } catch (error) {
                            clearTimeout(timeout);
                            console.log('‚ùå Error getting Teams context:', error);
                            resolve({ isTeamsEnvironment: true, fallback: true, error: error.message });
                        }
                    });
                }

                // Extract user information with comprehensive field checking
                console.log('üë§ Extracting user information...');
                const userFields = [
                    'userPrincipalName',
                    'loginHint', 
                    'upn',
                    'user.userPrincipalName',
                    'user.id',
                    'user.displayName',
                    'user.email'
                ];
                
                let foundUser = null;
                for (const field of userFields) {
                    try {
                        let value;
                        if (field.includes('.')) {
                            const parts = field.split('.');
                            value = teamsContext[parts[0]]?.[parts[1]];
                        } else {
                            value = teamsContext[field];
                        }
                        
                        if (value && typeof value === 'string' && value.trim() !== '') {
                            foundUser = value.trim();
                            console.log(`‚úÖ Found user in ${field}: ${foundUser}`);
                            break;
                        }
                    } catch (err) {
                        console.log(`‚ùå Error checking ${field}:`, err.message);
                    }
                }
                
                if (foundUser) {
                    currentUserEmail = foundUser;
                    currentUser = foundUser.includes('@') ? foundUser.split('@')[0] : foundUser;
                    console.log('‚úÖ User extracted:', { user: currentUser, email: currentUserEmail });
                } else {
                    console.log('‚ö†Ô∏è No user found in context, using Teams fallback');
                    currentUserEmail = 'teams-user@organization.com';
                    currentUser = 'teams-user';
                }
                  } catch (error) {
                console.log('‚ùå Teams authentication error:', error.message);
                console.log('üîÑ Using fallback authentication');
                
                // Generate unique user based on current session - NO DEMO DATA
                const timestamp = Date.now();
                const sessionId = Math.random().toString(36).substring(2, 8);
                
                if (isInTeams) {
                    console.log('üì± Detected Teams environment, creating fresh Teams user');
                    currentUserEmail = `teams-user-${sessionId}@organization.com`;
                    currentUser = `teams-user-${sessionId}`;
                } else {
                    console.log('üåê Browser environment detected, creating fresh user');
                    currentUserEmail = `user-${sessionId}@organization.com`;
                    currentUser = `user-${sessionId}`;
                }
                
                console.log('‚úÖ Created fresh user session - no sample data will be loaded');
            }            // Always proceed with authentication - NEVER show login page
            console.log('üöÄ Proceeding with authentication...');
            console.log('   Final user:', currentUser);
            console.log('   Final email:', currentUserEmail);
            
            // Clear the global timeout since we're proceeding
            clearTimeout(globalTimeout);
            completeAuthentication();
        }        function completeAuthentication() {
            // Hide status and show user info
            document.getElementById('status').style.display = 'none';
            
            // Determine environment for display
            const userAgent = navigator.userAgent;
            const isInTeams = userAgent.includes('Teams/') || 
                            userAgent.includes('SkypeSpaces') || 
                            window.location.href.includes('teams.microsoft.com') ||
                            window.parent !== window;
            
            const environmentText = isInTeams ? 'üì± Microsoft Teams' : 'üåê Web Browser';
            
            // Update user display with environment info
            document.getElementById('currentUserDisplay').innerHTML = `
                Welcome, ${currentUser}! <br>
                <small style="opacity: 0.8;">${environmentText}</small>
            `;
            document.getElementById('currentUser').textContent = currentUser;
            document.getElementById('userEmail').textContent = currentUserEmail;
            
            // Show user info
            document.getElementById('userInfo').style.display = 'block';
            
            // Set admin permissions (demo users get admin access)
            isAdmin = currentUserEmail.includes('admin') || currentUserEmail.includes('demo');
            
            // Hide admin tab for non-admin users
            const adminTab = document.querySelector('[data-tab="admin"]');
            if (!isAdmin) {
                adminTab.style.display = 'none';
            }            // Load user data from localStorage
            loadUserData();
            
            console.log('‚úÖ Authentication completed successfully!');
            console.log('   Environment:', environmentText);
            console.log('   User:', currentUser);
            console.log('   Email:', currentUserEmail);
            console.log('   Is Admin:', isAdmin);
        }        function updateStatus(message, type = 'info') {
            const statusEl = document.getElementById('status');
            statusEl.textContent = message;
            statusEl.className = `status ${type}`;
            
            // Add a progress indicator for long operations
            if (message.includes('Connecting')) {
                let dots = 0;
                const progressInterval = setInterval(() => {
                    dots = (dots + 1) % 4;
                    const dotString = '.'.repeat(dots);
                    statusEl.textContent = message + dotString;
                }, 500);
                
                // Clear progress after 8 seconds max
                setTimeout(() => {
                    clearInterval(progressInterval);
                }, 8000);
            }
        }async function loadUserData() {
            console.log(`üìÇ Loading user data for: ${currentUserEmail}`);
            
            // NUCLEAR OPTION: Clear ALL possible sample data sources
            console.log('üß® NUCLEAR CLEANUP: Removing ALL possible sample data...');
            
            // Clear memory
            passwords.clear();
            users.clear();
            
            // Clear ALL localStorage keys that could contain sample data
            const allKeys = Object.keys(localStorage);
            const keysToRemove = allKeys.filter(key => 
                key.includes('password') || 
                key.includes('demo') || 
                key.includes('sample') ||
                key.includes('globiq') ||
                key.includes('teams') ||
                key === 'users' ||
                key === 'credentials'
            );
            
            keysToRemove.forEach(key => {
                localStorage.removeItem(key);
                console.log(`üóëÔ∏è Removed localStorage key: ${key}`);
            });
            
            // Clear specific demo email accounts
            const demoEmails = [
                'demo@globiq.nl', 
                'teams-demo@globiq.nl',
                'user@example.com',
                'john@company.com',
                'jane@company.com',
                'teams-user@organization.com',
                'n.cuerpo@globiq.com'  // This might be the sample data source!
            ];
            
            demoEmails.forEach(email => {
                localStorage.removeItem(`passwords_${email}`);
                console.log(`üóëÔ∏è Cleared sample data for: ${email}`);
            });
            
            // Clear any other potential sample data keys
            const sampleKeys = [
                'demo_passwords', 'sample_data', 'test_passwords', 
                'initial_passwords', 'default_passwords', 'app_data'
            ];
            sampleKeys.forEach(key => {
                localStorage.removeItem(key);
            });
            
            console.log('‚úÖ Nuclear cleanup complete - all sample data sources cleared');
            
            // Try to load passwords from MongoDB API first
            try {
                const response = await apiCall('/passwords');
                if (response && response.success && response.passwords) {
                    console.log(`üìä MongoDB returned ${Object.keys(response.passwords).length} passwords`);
                    
                    // AGGRESSIVE FILTERING: Even filter API results for sample data
                    let realPasswordCount = 0;
                    for (const [id, password] of Object.entries(response.passwords)) {
                        const isSampleData = 
                            password.title.toLowerCase().includes('gmail') ||
                            password.title.toLowerCase().includes('linkedin') ||
                            password.title.toLowerCase().includes('azure') ||
                            password.title.toLowerCase().includes('portal') ||
                            password.title.toLowerCase().includes('account') ||
                            password.title.toLowerCase().includes('demo') ||
                            password.title.toLowerCase().includes('sample') ||
                            password.title.toLowerCase().includes('test') ||
                            password.username.includes('demo') ||
                            password.username.includes('sample') ||
                            password.username.includes('test') ||
                            password.username.includes('n.cuerpo') ||
                            password.username === 'user@example.com' ||
                            password.username === 'john.smith@company.com' ||
                            password.username === 'jane.doe@company.com';
                        
                        if (!isSampleData) {
                            passwords.set(id, password);
                            realPasswordCount++;
                        } else {
                            console.log(`üóëÔ∏è Filtered sample data from API: ${password.title} (${password.username})`);
                        }
                    }
                    
                    if (realPasswordCount > 0) {
                        showNotification(`‚úÖ Loaded ${realPasswordCount} real passwords from MongoDB!`, 'success');
                    } else {
                        showNotification('üìã Ready to save your passwords!', 'info');
                    }
                } else {
                    throw new Error('API response unsuccessful or empty');
                }
            } catch (error) {
                console.log('‚ö†Ô∏è MongoDB API not available, checking localStorage...');
                // Even localStorage fallback gets aggressive filtering
                const savedPasswords = localStorage.getItem(`passwords_${currentUserEmail}`);
                if (savedPasswords) {
                    try {
                        const passwordData = JSON.parse(savedPasswords);
                        console.log(`üìä Found ${Object.keys(passwordData).length} entries in localStorage`);
                        
                        // ULTRA-AGGRESSIVE filtering
                        const cleanedData = {};
                        let realCount = 0;
                        
                        for (const [id, password] of Object.entries(passwordData)) {
                            const isSampleData = 
                                password.title.toLowerCase().includes('gmail') ||
                                password.title.toLowerCase().includes('linkedin') ||
                                password.title.toLowerCase().includes('azure') ||
                                password.title.toLowerCase().includes('portal') ||
                                password.title.toLowerCase().includes('account') ||
                                password.title.toLowerCase().includes('demo') ||
                                password.title.toLowerCase().includes('sample') ||
                                password.title.toLowerCase().includes('test') ||
                                password.username.includes('demo') ||
                                password.username.includes('sample') ||
                                password.username.includes('test') ||
                                password.username.includes('n.cuerpo') ||
                                password.username.includes('john') ||
                                password.username.includes('jane') ||
                                password.username === 'user@example.com' ||
                                password.notes?.includes('Personal email') ||
                                password.notes?.includes('Professional networking') ||
                                password.notes?.includes('Cloud services');
                            
                            if (!isSampleData) {
                                cleanedData[id] = password;
                                passwords.set(id, password);
                                realCount++;
                            } else {
                                console.log(`üóëÔ∏è Filtered sample data from localStorage: ${password.title} (${password.username})`);
                            }
                        }
                        
                        // Save cleaned data back
                        localStorage.setItem(`passwords_${currentUserEmail}`, JSON.stringify(cleanedData));
                        
                        if (realCount === 0) {
                            showNotification('üìã Ready to save your passwords! (Sample data removed)', 'info');
                        } else {
                            showNotification(`‚úÖ Loaded ${realCount} real passwords from local storage`, 'success');
                        }
                    } catch (parseError) {
                        console.log('‚ùå Error parsing localStorage passwords:', parseError.message);
                        showNotification('‚ö†Ô∏è Starting fresh - ready for your passwords!', 'warning');
                    }
                } else {
                    console.log('üìù No existing passwords found - completely clean start');
                    showNotification('üéâ Welcome! Ready to save your first password.', 'info');
                }
            }

            // Load users from localStorage if admin (user management not implemented in MongoDB yet)
            if (isAdmin) {
                const savedUsers = localStorage.getItem('users');
                if (savedUsers) {
                    try {
                        const userData = JSON.parse(savedUsers);
                        for (const [id, user] of Object.entries(userData)) {
                            // Skip demo users
                            if (!user.email.includes('demo@') && !user.email.includes('john@') && !user.email.includes('jane@')) {
                                users.set(id, user);
                            }
                        }
                        console.log(`‚úÖ Loaded ${users.size} real users from localStorage`);
                    } catch (error) {
                        console.log('‚ùå Error loading users:', error.message);
                    }
                }
                
                // Always ensure current user exists in admin list
                let currentUserExists = false;
                for (const [id, user] of users) {
                    if (user.email === currentUserEmail) {
                        currentUserExists = true;
                        break;
                    }
                }
                
                if (!currentUserExists) {
                    const newUserId = Date.now().toString();
                    users.set(newUserId, { 
                        id: newUserId, 
                        name: currentUser, 
                        email: currentUserEmail, 
                        role: 'admin', 
                        status: 'active' 
                    });
                    saveUsers();
                }
            }

            // Update UI
            renderPasswords();
            updateStats();
            if (isAdmin) renderUsers();
        }async function savePasswords() {
            // This function now handles both MongoDB API and localStorage fallback
            console.log('üíæ Saving passwords...');
            
            // We don't need to explicitly save since individual operations handle API calls
            // This function is kept for compatibility but doesn't do bulk saves anymore
            try {
                const passwordData = Object.fromEntries(passwords);
                localStorage.setItem(`passwords_${currentUserEmail}`, JSON.stringify(passwordData));
                console.log('‚úÖ Passwords backed up to localStorage');
            } catch (error) {
                console.log('‚ùå Error backing up to localStorage:', error.message);
            }
        }

        function saveUsers() {
            try {
                const userData = Object.fromEntries(users);
                localStorage.setItem('users', JSON.stringify(userData));
                console.log('‚úÖ Users saved to storage');
            } catch (error) {
                console.log('‚ùå Error saving users:', error.message);
            }
        }        function renderPasswords() {
            // SUPER NUCLEAR: Actively hunt and destroy sample data before rendering
            ACTIVELY_REMOVE_SAMPLE_DATA();
            
            const container = document.getElementById('passwordsList');
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            let html = '';
            for (const [id, password] of passwords) {
                if (searchTerm && !password.title.toLowerCase().includes(searchTerm) && 
                    !password.username.toLowerCase().includes(searchTerm)) {
                    continue;
                }

                html += `
                    <div class="password-entry">
                        <div class="password-header">
                            <div>
                                <div class="password-title">${password.title}</div>
                                <div style="color: #666; font-size: 14px;">${password.username}</div>
                            </div>                            <div class="password-actions">
                                <button class="btn-small copy-btn" onclick="copyPassword('${id}')" style="background: #28a745; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; margin-right: 5px;">üìã Copy</button>
                                <button class="btn-small edit-btn" onclick="editPassword('${id}')" style="background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; margin-right: 5px;">‚úèÔ∏è Edit</button>
                                <button class="btn-small share-btn" onclick="sharePassword('${id}')" style="background: #ffc107; color: #000; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; margin-right: 5px;">üì§ Share</button>
                                <button class="btn-small delete-btn" onclick="deletePassword('${id}')" style="background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer;">üóëÔ∏è Delete</button>
                            </div>
                        </div>
                        <div class="password-details">
                            <div class="password-field">
                                <strong>URL:</strong> ${password.url ? `<a href="${password.url}" target="_blank">${password.url}</a>` : 'Not specified'}
                            </div>
                            <div class="password-field">
                                <strong>Password:</strong> 
                                <span id="password-${id}" style="font-family: monospace;">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>
                                <button class="toggle-password" onclick="togglePasswordVisibility('${id}')" style="padding: 2px 6px; margin-left: 5px;">üëÅÔ∏è</button>
                            </div>
                            <div class="password-field">
                                <strong>Category:</strong> ${password.category}
                            </div>
                            <div class="password-field">
                                <strong>Strength:</strong> <span style="color: ${password.strength === 'strong' ? '#28a745' : password.strength === 'medium' ? '#ffc107' : '#dc3545'}">${password.strength}</span>
                            </div>
                        </div>
                        ${password.notes ? `<div style="margin-top: 10px; font-style: italic; color: #666;">${password.notes}</div>` : ''}
                    </div>
                `;
            }

            if (html === '') {
                html = '<div style="text-align: center; padding: 40px; color: #666;">No passwords saved yet. Click "Add New Password" to get started!</div>';
            }

            container.innerHTML = html;
        }

        // Function to toggle password visibility
        function togglePassword(id) {
            const passwordField = document.querySelector(`#password-${id}`);
            const toggleButton = document.querySelector(`#toggle-${id}`);
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                toggleButton.textContent = 'üëÅÔ∏è Hide';
            } else {
                passwordField.type = 'password';
                toggleButton.textContent = 'üëÅÔ∏è Show';
            }
        }

        // Function to render a password entry
        function renderPasswordEntry(password, id) {
            return `
                <div class="password-entry">
                    <div class="password-header">
                        <h3 class="password-title">${password.title}</h3>
                        <div class="password-actions">
                            <button onclick="copyPassword('${id}')" class="copy-button">üìã Copy</button>
                            <button onclick="deletePassword('${id}')" style="background: #dc3545">üóëÔ∏è Delete</button>
                        </div>
                    </div>
                    <div class="password-details">
                        ${password.url ? `<div class="password-field">
                            <strong>URL:</strong> 
                            <a href="${password.url}" target="_blank">${password.url}</a>
                        </div>` : ''}
                        ${password.username ? `<div class="password-field">
                            <strong>Username:</strong> 
                            <span>${password.username}</span>
                            <button onclick="copyToClipboard('${password.username}')" class="copy-button">üìã</button>
                        </div>` : ''}
                        <div class="password-field">
                            <strong>Password:</strong>
                            <input type="password" id="password-${id}" value="${password.password}" readonly style="border:none;background:none;" />
                            <button onclick="togglePassword('${id}')" id="toggle-${id}" class="toggle-password">üëÅÔ∏è Show</button>
                            <button onclick="copyToClipboard('${password.password}')" class="copy-button">üìã</button>
                        </div>
                        ${password.notes ? `<div class="password-field">
                            <strong>Notes:</strong> 
                            <span>${password.notes}</span>
                        </div>` : ''}
                    </div>
                </div>
            `;
        }

        // Function to copy text to clipboard
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                updateStatus('‚úÖ Copied to clipboard!', 'success');
            } catch (err) {
                updateStatus('‚ùå Failed to copy to clipboard', 'error');
            }
        }        function renderUsers() {
            const container = document.getElementById('usersList');
            let html = '';
            
            for (const [id, user] of users) {
                html += `
                    <div class="password-entry">
                        <div class="password-header">
                            <div>
                                <div class="password-title">${user.name}</div>
                                <div style="color: #666; font-size: 14px;">${user.email}</div>
                            </div>
                            <div class="password-actions">
                                <span style="padding: 4px 8px; background: ${user.role === 'admin' ? '#007bff' : '#28a745'}; color: white; border-radius: 4px; font-size: 12px;">
                                    ${user.role.toUpperCase()}
                                </span>
                                <button class="btn-small" onclick="editUser('${id}')">‚úèÔ∏è Edit</button>
                            </div>
                        </div>
                    </div>
                `;
            }

            container.innerHTML = html;
        }        function updateStats() {
            document.getElementById('totalPasswords').textContent = passwords.size;
            
            let strongCount = 0;
            for (const [id, password] of passwords) {
                if (password.strength === 'strong') strongCount++;
            }
            document.getElementById('strongPasswords').textContent = strongCount;
            
            // For shared passwords, we'll count based on actual sharing implementation
            // For now, set to 0 since we don't have actual sharing logic yet
            document.getElementById('sharedCount').textContent = '0';
        }

        function showTab(tabName, tabElement) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.add('active');
            tabElement.classList.add('active');

            // Render appropriate content
            if (tabName === 'shared') {
                document.getElementById('sharedPasswordsList').innerHTML = '<div style="text-align: center; padding: 40px; color: #666;">No shared passwords yet.</div>';
            }
        }

        function filterPasswords() {
            renderPasswords();
        }

        function clearSearch() {
            document.getElementById('searchInput').value = '';
            renderPasswords();
        }

        function showAddPasswordModal() {
            const modal = document.getElementById('addPasswordModal');
            modal.style.display = 'block';
        }

        function hideModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'none';
        }

        // Handle logout
        function handleLogout() {
            if (confirm('Are you sure you want to logout?')) {
                localStorage.clear();
                window.location.reload();
            }
        }
    </script>
</body>
</html>